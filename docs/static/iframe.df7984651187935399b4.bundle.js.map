{"version":3,"file":"static/iframe.df7984651187935399b4.bundle.js","sources":["webpack:///./src/components/MF.js"],"sourcesContent":["import React, { PureComponent } from 'react'; // eslint-disable-line no-unused-vars\nimport propTypes from 'prop-types';\nimport Format from 'mf-parser/src/Format';\nimport parse from 'mf-parser/src/parse';\nimport toDisplay from 'mf-parser/src/util/toDisplay';\n\nconst STYLE_SUPERIMPOSE = {\n  flexDirection: 'column',\n  display: 'inline-flex',\n  justifyContent: 'center',\n  textAlign: 'left',\n  verticalAlign: 'middle'\n};\n\nconst STYLE_SUPERIMPOSE_SUP_SUB = {\n  lineHeight: 1,\n  fontSize: '70%'\n};\n\nconst mainStyle = {\n  fontFamily: 'sans-serif'\n};\n\nexport default class MF extends PureComponent {\n  render() {\n    const { mf, className, style } = this.props;\n    let fullStyle = mainStyle;\n    if (style) {\n      fullStyle = Object.assign({}, mainStyle, style);\n    }\n    let parsed;\n    try {\n      parsed = parse(mf);\n    } catch (e) {\n      // if not well formatted we just display the value\n      return (\n        <span className={className} style={fullStyle}>\n          {mf}\n        </span>\n      );\n    }\n    let displayed = toDisplay(parsed);\n    return (\n      <span className={className} style={fullStyle}>\n        {displayed.map((element, index) => getComponent(element, index))}\n      </span>\n    );\n  }\n}\n\nMF.propTypes = {\n  mf: propTypes.string.isRequired,\n  className: propTypes.string,\n  style: propTypes.object\n};\n\nfunction getComponent(element, index) {\n  switch (element.kind) {\n    case Format.SUBSCRIPT: {\n      return <sub key={index}>{element.value}</sub>;\n    }\n    case Format.SUPERSCRIPT: {\n      return <sup key={index}>{element.value}</sup>;\n    }\n    case Format.SUPERIMPOSE: {\n      return (\n        <span key={index} style={STYLE_SUPERIMPOSE}>\n          <sup style={STYLE_SUPERIMPOSE_SUP_SUB}>{element.over}</sup>\n          <sub style={STYLE_SUPERIMPOSE_SUP_SUB}>{element.under}</sub>\n        </span>\n      );\n    }\n    default:\n      return element.value;\n  }\n}\n"],"mappings":"AAMA","sourceRoot":""}